state("popcapgame1", "deluxeSteam")
{
    // Exists when inside a level
    int levelBase : "popcapgame1.exe", 0x00286768, 0x7b8;
    
    // How far you're in a multilevel challenge
    int multilevelIndex : "Peggle.exe", 0x00286768, 0x7b8, 0xf0;

    // Starts at zero
    int levelTimer : "popcapgame1.exe", 0x00286768, 0x7b8, 0xbc, 0x14c;

    // AIMING                       1
    // BALL_FALLING                 2
    // CLEARING_AFTER_SHOT          3
    // LEVEL_COMPLETE_DIALOG        5
    // STARTING_LEVEL               8
    // CHOOSING_CHARACTER_DIALOG    9
    // ZEN_SHOT                    10
    int boardState : "popcapgame1.exe", 0x00286768, 0x7b8, 0x154, 0x4;

    // Must be equal for the end-of-level dialog to fall
    int internalScore : "popcapgame1.exe", 0x00286768, 0x7b8, 0x154, 0x174;
    int displayedScore : "popcapgame1.exe", 0x00286768, 0x7b8, 0x14c, 0x94;

    // Ticks in every part of the level except in the ribbon/challenge medal animation
    int phaseTimer : "popcapgame1.exe", 0x00286768, 0x7b8, 0x154, 0x8;

    // Used to determine end state of level
    int opponentScore : "popcapgame1.exe", 0x00286768, 0x7b8, 0x154, 0x178;
    int orangePegsLeft : "popcapgame1.exe", 0x00286768, 0x7b8, 0x154, 0x360;
    string16 endDialogHeader : "popcapgame1.exe", 0x00286768, 0x7b8, 0x160, 0xa4;
}

state("popcapgame1", "nightsSteam")  // TODO add clearage state variable for Nights base
{
    int gameMode : "popcapgame1.exe", 0x002cbe04, 0x7f4;
    int levelBase : "popcapgame1.exe", 0x002cbe04, 0x864;
    int multilevelIndex : "popcapgame1.exe", 0x002cbe04, 0x864, 0x10c;
    int levelTimer : "popcapgame1.exe", 0x002cbe04, 0x864, 0xd4, 0x14c;
    int boardState : "popcapgame1.exe", 0x002cbe04, 0x864, 0x720, 0x4;
    int internalScore : "popcapgame1.exe", 0x002cbe04, 0x864, 0x720, 0x200;
    int displayedScore : "popcapgame1.exe", 0x002cbe04, 0x864, 0x718, 0xac;
    int phaseTimer : "popcapgame1.exe", 0x002cbe04, 0x864, 0x720, 0x8;
    int opponentScore : "popcapgame1.exe", 0x002cbe04, 0x864, 0x720, 0x204;
    int orangePegsLeft : "popcapgame1.exe", 0x002cbe04, 0x864, 0x720, 0x414;
    string16 endDialogHeader : "popcapgame1.exe", 0x002cbe04, 0x864, 0x72c, 0xa4;
}

state("popcapgame1", "extremeSteam")
{
    int levelBase : "popcapgame1.exe", 0x0028a808, 0x7b8;
    int multilevelIndex : "Peggle.exe", 0x0028a808, 0x7b8, 0xf0;
    int levelTimer : "popcapgame1.exe", 0x0028a808, 0x7b8, 0xbc, 0x14c;
    int boardState : "popcapgame1.exe", 0x0028a808, 0x7b8, 0x154, 0x4;
    int internalScore : "popcapgame1.exe", 0x0028a808, 0x7b8, 0x154, 0x174;
    int displayedScore : "popcapgame1.exe", 0x0028a808, 0x7b8, 0x14c, 0x94;
    int phaseTimer : "popcapgame1.exe", 0x0028a808, 0x7b8, 0x154, 0x8;
    int opponentScore : "popcapgame1.exe", 0x0028a808, 0x7b8, 0x154, 0x178;
    int orangePegsLeft : "popcapgame1.exe", 0x0028a808, 0x7b8, 0x154, 0x360;
    string16 endDialogHeader : "popcapgame1.exe", 0x0028a808, 0x7b8, 0x160, 0xa4;
    int clearage : "popcapgame1.exe", 0x0028a808, 0x7b8, 0x160, 0x23c;
}

state("Peggle", "deluxePortable")
{
    int levelBase : "Peggle.exe", 0x00286768, 0x7b8;
    int multilevelIndex : "Peggle.exe", 0x00286768, 0x7b8, 0xf0;
    int levelTimer : "Peggle.exe", 0x00286768, 0x7b8, 0xbc, 0x14c;
    int boardState : "Peggle.exe", 0x00286768, 0x7b8, 0x154, 0x4;
    int internalScore : "Peggle.exe", 0x00286768, 0x7b8, 0x154, 0x174;
    int displayedScore : "Peggle.exe", 0x00286768, 0x7b8, 0x14c, 0x94;
    int phaseTimer : "Peggle.exe", 0x00286768, 0x7b8, 0x154, 0x8;
    int opponentScore : "Peggle.exe", 0x00286768, 0x7b8, 0x154, 0x178;
    int orangePegsLeft : "Peggle.exe", 0x00286768, 0x7b8, 0x154, 0x360;
    string16 endDialogHeader : "Peggle.exe", 0x00286768, 0x7b8, 0x160, 0xa4;
    int clearage : "Peggle.exe", 0x00286768, 0x7b8, 0x160, 0x23c;
}

state("PeggleNights", "nightsPortable")
{
    int gameMode : "PeggleNights.exe", 0x002cae04, 0x7f4;
    int levelBase : "PeggleNights.exe", 0x002cae04, 0x864;
    int multilevelIndex : "PeggleNights.exe", 0x002cae04, 0x864, 0x10c;
    int levelTimer : "PeggleNights.exe", 0x002cae04, 0x864, 0xd4, 0x14c;
    int boardState : "PeggleNights.exe", 0x002cae04, 0x864, 0x720, 0x4;
    int internalScore : "PeggleNights.exe", 0x002cae04, 0x864, 0x720, 0x200;
    int displayedScore : "PeggleNights.exe", 0x002cae04, 0x864, 0x718, 0xac;
    int phaseTimer : "PeggleNights.exe", 0x002cae04, 0x864, 0x720, 0x8;
    int opponentScore : "PeggleNights.exe", 0x002cae04, 0x864, 0x720, 0x204;
    int orangePegsLeft : "PeggleNights.exe", 0x002cae04, 0x864, 0x720, 0x414;
    string16 endDialogHeader : "PeggleNights.exe", 0x002cae04, 0x864, 0x72c, 0xa4;
}

state("PeggleWoW", "wowPortable")
{
    int gameMode : "PeggleWoW.exe", 0x002b9cfc, 0x7f4;
    int levelBase : "PeggleWoW.exe", 0x002b9cfc, 0x864;
    int multilevelIndex : "PeggleWoW.exe", 0x002b9cfc, 0x864, 0x10c;
    int levelTimer : "PeggleWoW.exe", 0x002b9cfc, 0x864, 0xd4, 0x14c;
    int boardState : "PeggleWoW.exe", 0x002b9cfc, 0x864, 0x720, 0x4;
    int internalScore : "PeggleWoW.exe", 0x002b9cfc, 0x864, 0x720, 0x200;
    int displayedScore : "PeggleWoW.exe", 0x002b9cfc, 0x864, 0x718, 0xac;
    int phaseTimer : "PeggleWoW.exe", 0x002b9cfc, 0x864, 0x720, 0x8;
    int opponentScore : "PeggleWoW.exe", 0x002b9cfc, 0x864, 0x720, 0x204;
    int orangePegsLeft : "PeggleWoW.exe", 0x002b9cfc, 0x864, 0x720, 0x414;
    string16 endDialogHeader : "PeggleWoW.exe", 0x002b9cfc, 0x864, 0x72c, 0xa4;
}


startup
{
    settings.Add("modeBase", true, "(Pick one) End time on...");
    settings.Add("modeClear", true, "Level completed", "modeBase");
    settings.Add("modeFullClear", false, "Level full cleared", "modeBase");
    settings.Add("modeDeath", false, "Level failed", "modeBase");
    settings.Add("modeChallenge", false, "Challenge completed", "modeBase");
    
    
    // constants
    vars.versions = new string[] {
        "deluxeSteam", "nightsSteam", "extremeSteam", "deluxePortable", "nightsPortable", "wowPortable"
    };
    
    
    vars.deluxeBaseVersions = new string[] {
        "deluxeSteam", "extremeSteam", "deluxePortable"
    };

    vars.targetNames = new Dictionary<string, string>();
    vars.targetNames.Add("deluxeSteam", "popcapgame1.exe");
    vars.targetNames.Add("extremeSteam", "popcapgame1.exe");
    vars.targetNames.Add("deluxePortable", "Peggle.exe");
    vars.targetNames.Add("nightsSteam", "popcapgame1.exe");
    vars.targetNames.Add("nightsPortable", "PeggleNights.exe");
    vars.targetNames.Add("wowPortable", "PeggleWoW.exe");

    vars.targetSizes = new Dictionary<string, int>();
    vars.targetSizes.Add("deluxePortable", 0x2f1000);
    vars.targetSizes.Add("deluxeSteam", 0x2f1000);
    vars.targetSizes.Add("extremeSteam", 0x2f5000);
    vars.targetSizes.Add("nightsSteam", 0x36e000);
    vars.targetSizes.Add("nightsPortable", 0x36d000);
    vars.targetSizes.Add("wowPortable", 0x35c000);
}

init
{
    
    vars.IsEndOfIL = (Func<bool>)(() => 
    {
        if (settings["modeFullClear"])
        {
            return current.clearage == 100;
        }
        
        if (settings["modeDeath"])
        {
            return true;
        }
        
        switch ((string)current.endDialogHeader)
        {
            case "Results":
                return (current.internalScore > current.opponentScore);
            case "Level Passed!":
            case "Level Done":
                return !settings["modeChallenge"];
            default:
                print(
                    "Peggle ASL: Orange Pegs Left = " 
                    + current.orangePegsLeft.ToString()
                );
                return current.orangePegsLeft == 0;
        }
    });
    
    vars.IsEndScreen = (Func<bool>)(() =>
    {
        if ((Array.IndexOf(vars.deluxeBaseVersions, version) >= 0) 
            || (current.gameMode < 4))
        {
            
            print(
                "Peggle ASL: Not in a nights challenge. "
            );
            print(
                "Peggle ASL: current.boardState = " 
                + current.boardState.ToString()
            );
            print(
                "Peggle ASL: score diff = "
                + (old.internalScore - old.displayedScore).ToString()
            );
            print(
                "Peggle ASL: current.phaseTimer = " 
                + current.phaseTimer.ToString()
            );
            print(
                "Peggle ASL: old.phaseTimer = " 
                + old.phaseTimer.ToString()
            );
            return (current.boardState == 5)
                   && (old.internalScore == old.displayedScore)
                   && (current.phaseTimer > old.phaseTimer);
        }
        
        return (current.boardState == 5)
               && (old.internalScore == old.displayedScore);
    });
    
    vars.levelStarted = false;
    
    foreach (string versionName in vars.versions)
    {
        var gameModules = modules.Where(m => m.ModuleName == vars.targetNames[versionName]);
        if (gameModules.Count() == 0) 
        {
            continue;
        }
        
        int moduleSize = gameModules.First().ModuleMemorySize;
        if (moduleSize == vars.targetSizes[versionName])
        {
            version = versionName;
        }
    }
}

start
{
    return (current.boardState == 8)
           && ((old.boardState != 8) || (current.levelTimer == 0));
}

split
{
    return (current.boardState == 5)
           && (old.internalScore == old.displayedScore)
           && (current.phaseTimer > old.phaseTimer)
           && vars.IsEndOfIL();
}

reset
{
    return (current.levelBase == 0) || ((current.levelTimer < old.levelTimer) && (current.multilevelIndex == 0));
}
